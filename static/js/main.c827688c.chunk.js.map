{"version":3,"sources":["lib/InputFn.module.css","components/contactForm/ContactForm.module.css","components/contactList/ContactList.module.css","lib/ButtonFn.module.css","components/phonebook/Phonebook.module.css","redux/actions.js","redux/reducers.js","redux/store.js","redux/operations.js","redux/selectors.js","lib/ButtonFn.jsx","lib/InputFn.jsx","components/contactForm/ContactForm.jsx","components/filter/Filter.jsx","components/contactList/ContactList.jsx","components/phonebook/Phonebook.jsx","App.jsx","index.js"],"names":["module","exports","fetchContactsRequest","createAction","fetchContactsSuccess","fetchContactsError","addContactRequest","addContactSuccess","addContactError","deleteContactRequest","deleteContactSuccess","deleteContactError","changeFilter","items","createReducer","_","payload","state","filter","id","combineReducers","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","store","configureStore","reducer","contacts","rootReducer","devTools","process","axios","defaults","baseURL","contactsOperations","fetchContacts","dispatch","a","get","data","addContact","name","number","contact","post","deleteContact","delete","getContacts","getFilter","getVisibleContacts","createSelector","toLowerCase","includes","getFilteredContacts","ButtonFn","type","onClick","className","css","btn","InputFn","titleNameInput","placeholder","value","onChange","required","label","htmlFor","autoComplete","input","ContactForm","useState","setName","setNumber","contactNameId","uuid","useSelector","useDispatch","useForm","register","handleSubmit","handleChange","evt","target","reset","form","onSubmit","preventDefault","console","log","find","alert","inputName","ref","Filter","contactsActions","ContactList","useEffect","map","contactListItem","listItemContainer","onDeleteContact","Phonebook","localStorage","setItem","JSON","stringify","container","onAddContact","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c827688c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"label\":\"InputFn_label__1nAYX\",\"input\":\"InputFn_input__1ROy6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__c72Tq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contactListItem\":\"ContactList_contactListItem__1i-b0\",\"listItemContainer\":\"ContactList_listItemContainer__3-Y0T\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"btn\":\"ButtonFn_btn__2jnLl\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Phonebook_container__3CJk9\"};","import { createAction } from '@reduxjs/toolkit';\n\nexport const fetchContactsRequest = createAction(\n  'contacts/fetchContactRequest',\n);\nexport const fetchContactsSuccess = createAction(\n  'contacts/fetchContactSuccess',\n);\nexport const fetchContactsError = createAction('contacts/fetchContactError');\n\nexport const addContactRequest = createAction('contacts/addContactRequest');\nexport const addContactSuccess = createAction('contacts/addContactSuccess');\nexport const addContactError = createAction('contacts/addContactError');\n\nexport const deleteContactRequest = createAction(\n  'contacts/deleteContactRequest',\n);\nexport const deleteContactSuccess = createAction(\n  'contacts/deleteContactSuccess',\n);\nexport const deleteContactError = createAction('contacts/deleteContactError');\n\nexport const changeFilter = createAction('contacts/changeFilter');\n","import { combineReducers, createReducer } from '@reduxjs/toolkit';\nimport {\n  changeFilter,\n  addContactSuccess,\n  deleteContactSuccess,\n  fetchContactsSuccess,\n} from './actions';\n\nconst items = createReducer([], {\n  [fetchContactsSuccess]: (_, { payload }) => payload,\n  [addContactSuccess]: (state, { payload }) => [...state, payload],\n  [deleteContactSuccess]: (state, { payload }) =>\n    state.filter(({ id }) => {\n      return id !== payload;\n    }),\n});\n\nconst filter = createReducer('', {\n  [changeFilter]: (_, { payload }) => payload,\n});\n\nexport default combineReducers({\n  items,\n  filter,\n});\n","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\nimport {\n  FLUSH,\n  REHYDRATE,\n  PAUSE,\n  PERSIST,\n  PURGE,\n  REGISTER,\n} from 'redux-persist';\nimport logger from 'redux-logger';\nimport rootReducer from './reducers';\n\nconst middleware = [\n  ...getDefaultMiddleware({\n    serializableCheck: {\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n    },\n  }),\n  logger,\n];\n\nconst store = configureStore({\n  reducer: {\n    contacts: rootReducer,\n  },\n  middleware,\n  devTools: process.env.NODE_ENV === 'development',\n});\n\nexport default store;\n","import axios from 'axios';\nimport {\n  fetchContactsRequest,\n  fetchContactsSuccess,\n  fetchContactsError,\n  addContactRequest,\n  addContactSuccess,\n  addContactError,\n  deleteContactRequest,\n  deleteContactSuccess,\n  deleteContactError,\n} from './actions';\n\naxios.defaults.baseURL = 'http://localhost:4040';\n\nconst fetchContacts = () => async dispatch => {\n  dispatch(fetchContactsRequest());\n  try {\n    const { data } = await axios.get('/contacts');\n    dispatch(fetchContactsSuccess(data));\n  } catch (error) {\n    dispatch(fetchContactsError(error));\n  }\n};\n\nconst addContact = (name, number) => async dispatch => {\n  const contact = {\n    name,\n    number,\n  };\n\n  dispatch(addContactRequest());\n\n  try {\n    const { data } = await axios.post('/contacts', contact);\n    dispatch(addContactSuccess(data));\n  } catch (error) {\n    dispatch(addContactError(error));\n  }\n};\n\nconst deleteContact = id => async dispatch => {\n  dispatch(deleteContactRequest());\n\n  try {\n    await axios.delete(`/contacts/${id}`);\n    dispatch(deleteContactSuccess(id));\n  } catch (error) {\n    dispatch(deleteContactError(error));\n  }\n};\n\nconst contactsOperations = {\n  fetchContacts,\n  addContact,\n  deleteContact,\n};\nexport default contactsOperations;\n","import { createSelector } from '@reduxjs/toolkit';\n\nexport const getContacts = state => state.contacts.items;\nexport const getFilter = state => state.contacts.filter;\n\nexport const getVisibleContacts = createSelector(\n  [getContacts, getFilter],\n  (contacts, filter) => {\n    const getFilteredContacts = contacts =>\n      contacts.filter(contact =>\n        contact.name.toLowerCase().includes(filter.toLowerCase()),\n      );\n\n    return getFilteredContacts(contacts);\n  },\n);\n","import React from 'react';\nimport css from './ButtonFn.module.css';\n\nexport default function ButtonFn({ name, type, onClick }) {\n  return (\n    <>\n      <button className={css.btn} type={type} onClick={onClick}>\n        {name}\n      </button>\n    </>\n  );\n}\n","import React from 'react';\nimport css from './InputFn.module.css';\n\nexport default function InputFn({\n  titleNameInput,\n  type,\n  placeholder,\n  value,\n  onChange,\n  name,\n  id,\n  required,\n}) {\n  return (\n    <>\n      <label className={css.label} htmlFor={id}>\n        {titleNameInput}\n        <input\n          autoComplete=\"off\"\n          className={css.input}\n          type={type}\n          placeholder={placeholder}\n          value={value}\n          onChange={onChange}\n          name={name}\n          required={required}\n        />\n      </label>\n    </>\n  );\n}\n","import React, { useState } from 'react';\nimport { v4 as uuid } from 'uuid';\nimport { useSelector, useDispatch } from 'react-redux';\nimport contactsOperations from '../../redux/operations';\nimport { getContacts } from '../../redux/selectors';\nimport { useForm } from 'react-hook-form';\n\nimport ButtonFn from '../../lib/ButtonFn';\nimport InputFn from '../../lib/InputFn';\nimport css from './ContactForm.module.css';\n\nexport default function ContactForm() {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const contactNameId = uuid();\n  // const contactNumberId = uuid();\n\n  const contacts = useSelector(getContacts);\n  const dispatch = useDispatch();\n\n  const { register, handleSubmit } = useForm();\n\n  const handleChange = evt => {\n    const { name, value } = evt.target;\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n      case 'number':\n        setNumber(value);\n        break;\n      default:\n        return;\n    }\n  };\n\n  const handleFormSubmit = (data, evt) => {\n    evt.preventDefault();\n    console.log(data.name);\n    if (contacts.find(contact => contact.name === data.name)) {\n      alert(`${data.name} is already exists!`);\n      reset();\n      return;\n    }\n    dispatch(contactsOperations.addContact(data.name, data.number));\n    reset();\n  };\n\n  const reset = () => {\n    setName('');\n    setNumber('');\n  };\n  return (\n    <form className={css.form} onSubmit={handleSubmit(handleFormSubmit)}>\n      <InputFn\n        className={css.inputName}\n        name=\"name\"\n        titleNameInput=\"Name\"\n        type=\"text\"\n        placeholder=\"Enter name\"\n        value={name}\n        onChange={handleChange}\n        id={contactNameId}\n        ref={register}\n        required\n      />\n      <InputFn\n        name=\"number\"\n        titleNameInput=\"Number\"\n        type=\"tel\"\n        placeholder=\"Enter number\"\n        value={number}\n        onChange={handleChange}\n        // id={contactNumberId}\n        ref={register}\n        required\n      />\n      <br />\n      <ButtonFn name=\"Add contact\" type=\"submit\" />\n    </form>\n  );\n}\n","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { getFilter } from '../../redux/selectors';\nimport * as contactsActions from '../../redux/actions';\n\nimport PropTypes from 'prop-types';\nimport InputFn from '../../lib/InputFn';\n\nconst Filter = () => {\n  const value = useSelector(getFilter);\n  const dispatch = useDispatch();\n\n  return (\n    <label>\n      <InputFn\n        value={value}\n        type=\"text\"\n        placeholder=\"Enter contact name\"\n        onChange={evt =>\n          dispatch(contactsActions.changeFilter(evt.target.value))\n        }\n        titleNameInput=\"Find contact by name:\"\n      />\n    </label>\n  );\n};\n\nFilter.propTypes = {\n  value: PropTypes.string,\n  onChange: PropTypes.func,\n};\n\nexport default Filter;\n","import React, { useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { useSelector, useDispatch } from 'react-redux';\nimport contactsOperations from '../../redux/operations';\nimport { getVisibleContacts } from '../../redux/selectors';\n\nimport ButtonFn from '../../lib/ButtonFn';\nimport css from './ContactList.module.css';\n\nexport default function ContactList() {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(contactsOperations.fetchContacts());\n  }, [dispatch]);\n\n  const contacts = useSelector(getVisibleContacts);\n\n  const onDeleteContact = id => dispatch(contactsOperations.deleteContact(id));\n\n  return (\n    <ul>\n      {contacts.map(({ id, name, number }) => (\n        <li className={css.contactListItem} key={id}>\n          <div className={css.listItemContainer}>\n            <span>{name}:</span>\n            <span>{number}</span>\n            <ButtonFn\n              name=\"Delete\"\n              type=\"button\"\n              onClick={() => onDeleteContact(id)}\n            />\n          </div>\n        </li>\n      ))}\n    </ul>\n  );\n}\n\nContactList.propTypes = {\n  onDeleteContact: PropTypes.func,\n  contacts: PropTypes.array,\n  id: PropTypes.string,\n  name: PropTypes.string,\n  number: PropTypes.string,\n};\n","import React, { useEffect } from 'react';\nimport { addContactSuccess } from '../../redux/actions';\nimport ContactForm from '../contactForm/ContactForm';\nimport Filter from '../filter/Filter';\nimport ContactList from '../contactList/ContactList';\nimport css from './Phonebook.module.css';\n\nexport default function Phonebook({ contacts }) {\n  useEffect(() => {\n    localStorage.setItem('contacts', JSON.stringify(contacts));\n  }, [contacts]);\n\n  return (\n    <div className={css.container}>\n      <h2>Phonebook</h2>\n      <ContactForm onAddContact={addContactSuccess} />\n      <h2>Contacts</h2>\n      <Filter />\n      <ContactList />\n    </div>\n  );\n}\n","import React from 'react';\nimport Phonebook from './components/phonebook/Phonebook';\n\nexport function App() {\n  return <Phonebook />;\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport store from './redux/store';\nimport { App } from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}